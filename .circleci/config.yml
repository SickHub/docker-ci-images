# Required ENV variables
# DOCKER_USER, DOCKER_PASS
version: 2.1
aliases:
  - &parameters
    version:
      default: latest
      type: string
    buildx_url:
      default: https://github.com/docker/buildx/releases
      type: string
    buildx_version:
      default: v0.21.1 # github-releases:docker/buildx
      type: string
    kubectl_version:
      default: v1.32.2 # github-releases:kubernetes/kubernetes
      type: string
    helm_version:
      default: v3.17.1 # github-releases:helm/helm
      type: string
    ct_version:
      default: v3.12.0 # github-releases:helm/chart-testing
      type: string
    kind_version:
      default: v0.27.0 # github-releases:kubernetes-sigs/kind
      type: string
    argocd_version:
      default: v2.14.3 # github-releases:argoproj/argo-cd
      type: string
    kustomize_version:
      default: kustomize/v5.6.0 # github-releases:kubernetes-sigs/kustomize
      type: string
    kubeval_version:
      default: v0.16.1 # github-releases:instrumenta/kubeval
      type: string
    kubeseal_version:
      default: v0.28.0 # github-releases:bitnami-labs/sealed-secrets
      type: string
    ansible_version:
      default: latest
      type: string
    platforms:
      default: linux/amd64
      type: string
    repo:
      default: drpsychick
      type: string
    tag:
      default: latest
      type: string
  - &docker-dind
    - image: docker:dind
  - &buildx
    - checkout
    - setup_remote_docker
    - run:
        name: Install buildx
        command: |
          apk add --no-cache curl
          mkdir -p ~/.docker/cli-plugins
          fileName="buildx-<< parameters.buildx_version >>.linux-amd64"
          url="<< parameters.buildx_url >>/download/<< parameters.buildx_version >>/${fileName}"
          curl -sSL -o ~/.docker/cli-plugins/docker-buildx $url
          chmod a+x ~/.docker/cli-plugins/docker-buildx
          docker buildx install
    - run:
        name: Bootstrap buildx
        command: |
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker context create xbuilder
          docker buildx create xbuilder --use
          docker buildx inspect --bootstrap
    - run:
        name: Build images
        command: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin &> /dev/null || exit 1
          cd images
          for img in $(ls -1d *); do
            if [ "latest" = "<< parameters.version >>" ]; then

              # use default ARGs of image
              echo "Building << parameters.repo >>/$img:<< parameters.tag >>"
              docker buildx build --progress plain --platform << parameters.platforms >> \
                --build-arg BUILDX_VERSION=<< parameters.buildx_version >> \
                --build-arg KUBECTL_VERSION=<< parameters.kubectl_version >> \
                --build-arg HELM_VERSION=<< parameters.helm_version >> \
                --build-arg CT_VERSION=<< parameters.ct_version >> \
                --build-arg KIND_VERSION=<< parameters.kind_version >> \
                --build-arg KUSTOMIZE_VERSION=<< parameters.kustomize_version >> \
                --build-arg KUBESEAL_VERSION=<< parameters.kubeseal_version >> \
                --tag << parameters.repo >>/$img:<< parameters.tag >> --push ./$img/
            else

              # determine source version and target tag
              VERSION=<< parameters.version >>
              TAG=<< parameters.version >>
              if [ "$img" = "dind-buildx-helm" -o "$img" = "dind-helm" ]; then
                VERSION=<< parameters.version >>
                TAG=<< parameters.kubectl_version >>
              fi
              if [ "$img" = "dind-buildx-helm-kind" -o "$img" = "dind-helm-kind" ]; then
                VERSION=<< parameters.kubectl_version >>
                TAG=<< parameters.kind_version >>
              fi

              echo "Building << parameters.repo >>/$img:$TAG based on $VERSION"
              docker buildx build --progress plain --platform << parameters.platforms >> \
                --build-arg VERSION=$VERSION \
                --build-arg BUILDX_VERSION=<< parameters.buildx_version >> \
                --build-arg KUBECTL_VERSION=<< parameters.kubectl_version >> \
                --build-arg HELM_VERSION=<< parameters.helm_version >> \
                --build-arg CT_VERSION=<< parameters.ct_version >> \
                --build-arg KIND_VERSION=<< parameters.kind_version >> \
                --build-arg KUSTOMIZE_VERSION=<< parameters.kustomize_version >> \
                --build-arg KUBESEAL_VERSION=<< parameters.kubeseal_version >> \
                --tag << parameters.repo >>/$img:$TAG --push ./$img/
            fi
          done

  - &build86
    - checkout
    - setup_remote_docker
    - run:
        # plain docker build x86 without cross-platform
        name: Build images
        command: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin &> /dev/null || exit 1
          cd images_x86
          for img in $(ls -1d *); do
            if [ "latest" = "<< parameters.version >>" ]; then

              # use default ARGs of image
              echo "Building << parameters.repo >>/$img:<< parameters.tag >>"
              docker build --progress plain \
                --tag << parameters.repo >>/$img:<< parameters.tag >> ./$img/
              docker push << parameters.repo >>/$img:<< parameters.tag >>
            else

              # determine source version and target tag
              VERSION=<< parameters.version >>
              TAG=<< parameters.version >>

              echo "Building << parameters.repo >>/$img:$TAG based on $VERSION"
              docker build --progress plain \
                --build-arg VERSION=$VERSION \
                --build-arg ARGOCD_VERSION=<< parameters.argocd_version >> \
                --build-arg HELM_VERSION=<< parameters.helm_version >> \
                --build-arg CT_VERSION=<< parameters.ct_version >> \
                --build-arg KUBECTL_VERSION=<< parameters.kubectl_version >> \
                --build-arg KUSTOMIZE_VERSION=<< parameters.kustomize_version >> \
                --build-arg KUBESEAL_VERSION=<< parameters.kubeseal_version >> \
                --tag << parameters.repo >>/$img:$TAG ./$img/
              docker push << parameters.repo >>/$img:$TAG
            fi
          done
  - &build_ansible
    - checkout
    - setup_remote_docker
    - run:
        # plain docker build x86 without cross-platform
        name: Build images
        command: |
          echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin &> /dev/null || exit 1
          cd images_ansible
          for img in $(ls -1d *); do
            if [ "latest" = "<< parameters.version >>" ]; then
              # use default ARGs of image
              echo "Building << parameters.repo >>/$img:<< parameters.tag >>"
              docker build --progress plain \
                --tag << parameters.repo >>/$img:<< parameters.tag >> ./$img/
              docker push << parameters.repo >>/$img:<< parameters.tag >>
            else
              # determine source version and target tag
              TAG=<< parameters.ansible_version >>

              echo "Building << parameters.repo >>/$img:$TAG based on stable version"
              docker build --progress plain \
                --build-arg ANSIBLE_VERSION=<< parameters.ansible_version >> \
                --tag << parameters.repo >>/$img:$TAG ./$img/
              docker push << parameters.repo >>/$img:$TAG
            fi
          done

jobs:
  buildx:
    parameters: *parameters
    docker: *docker-dind
    resource_class: small
    steps: *buildx
  build86:
    parameters: *parameters
    docker: *docker-dind
    resource_class: small
    steps: *build86
  build_ansible:
    parameters: *parameters
    docker: *docker-dind
    resource_class: small
    steps: *build_ansible

workflows:
  version: 2
  build-images:
    jobs:
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["20-dind"]
              kubectl_version: ["v1.20.4"]
              helm_version: ["v3.5.0"]
              kind_version: [ "v0.10.0" ]
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["19-dind"]
              kubectl_version: ["v1.19.4"]
              helm_version: ["v3.4.2"]
              kind_version: ["v0.9.0"]
      - build86:
          matrix:
            parameters:
              version: ["latest"]
      - build86:
          matrix:
            parameters:
              version: ["3"]
              argocd_version: ["v2.1.7"]
              helm_version: ["v3.5.0"]
              kubectl_version: ["stable"]
              kustomize_version: [ "kustomize/v4.4.1" ]
              kubeval_version: ["latest"]
              kubeseal_version: ["v0.17.1"]
      - build_ansible:
          matrix:
            parameters:
              version: ["latest"]
              ansible_version: ["latest"]
      - build_ansible:
          matrix:
            parameters:
              version: ["stable"]
              ansible_version: ["12", "13", "14", "15", "16"]

  # build 'latest' weekly
  weekly:
    triggers:
      - schedule:
          # mondays, 6:03 am, UTC
          cron: "3 6 * * 1"
          filters:
            branches:
              only:
                - master
    jobs:
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
      - build86:
          matrix:
            parameters:
              version: ["latest"]

  # build other tags monthly
  monthly:
    triggers:
      - schedule:
          # first day of month, 5:03 am, UTC
          cron: "3 5 1 * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["20-dind"]
              kubectl_version: ["v1.20.4"]
              helm_version: ["v3.5.0"]
              kind_version: [ "v0.10.0" ]
      - buildx:
          matrix:
            parameters:
              platforms: ["linux/amd64,linux/arm64"]
              version: ["19-dind"]
              kubectl_version: ["v1.19.4"]
              helm_version: ["v3.4.2"]
              kind_version: ["v0.9.0"]
      - build_ansible:
          matrix:
            parameters:
              ansible_version: ["12", "13", "14", "15", "16", "latest"]
